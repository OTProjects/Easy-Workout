{"ast":null,"code":"import { supabase } from '../supabase';\n\n// Workout CRUD operations\nexport const workoutService = {\n  // Get all workouts for the current user\n  async getWorkouts() {\n    const {\n      data,\n      error\n    } = await supabase.from('workouts').select(`\n        *,\n        exercises (*)\n      `).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error fetching workouts:', error);\n      throw error;\n    }\n    return data || [];\n  },\n  // Create a new workout\n  async createWorkout(workout) {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('workouts').insert([{\n      name: workout.name,\n      user_id: user.id\n    }]).select().single();\n    if (error) {\n      console.error('Error creating workout:', error);\n      throw error;\n    }\n    return {\n      ...data,\n      exercises: []\n    };\n  },\n  // Update a workout\n  async updateWorkout(workoutId, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('workouts').update(updates).eq('id', workoutId).select().single();\n    if (error) {\n      console.error('Error updating workout:', error);\n      throw error;\n    }\n    return data;\n  },\n  // Delete a workout\n  async deleteWorkout(workoutId) {\n    const {\n      error\n    } = await supabase.from('workouts').delete().eq('id', workoutId);\n    if (error) {\n      console.error('Error deleting workout:', error);\n      throw error;\n    }\n  },\n  // Exercise operations\n  async getExercises(workoutId) {\n    const {\n      data,\n      error\n    } = await supabase.from('exercises').select('*').eq('workout_id', workoutId).order('order_index');\n    if (error) {\n      console.error('Error fetching exercises:', error);\n      throw error;\n    }\n    return data || [];\n  },\n  async createExercise(exercise) {\n    const {\n      data,\n      error\n    } = await supabase.from('exercises').insert([exercise]).select().single();\n    if (error) {\n      console.error('Error creating exercise:', error);\n      throw error;\n    }\n    return data;\n  },\n  async updateExercise(exerciseId, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('exercises').update(updates).eq('id', exerciseId).select().single();\n    if (error) {\n      console.error('Error updating exercise:', error);\n      throw error;\n    }\n    return data;\n  },\n  async deleteExercise(exerciseId) {\n    const {\n      error\n    } = await supabase.from('exercises').delete().eq('id', exerciseId);\n    if (error) {\n      console.error('Error deleting exercise:', error);\n      throw error;\n    }\n  },\n  // Routine operations\n  async getRoutine() {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('workout_routines').select('*').eq('user_id', user.id).single();\n    if (error && error.code !== 'PGRST116') {\n      // PGRST116 is \"not found\" error\n      console.error('Error fetching routine:', error);\n      throw error;\n    }\n    return data;\n  },\n  async saveRoutine(routine) {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n\n    // Try to update existing routine first\n    const existingRoutine = await this.getRoutine();\n    if (existingRoutine) {\n      const {\n        data,\n        error\n      } = await supabase.from('workout_routines').update({\n        selected_workout_ids: routine.selectedWorkoutIds,\n        ordered_routine_items: routine.orderedRoutineItems,\n        rotation_cycles: routine.rotationCycles\n      }).eq('user_id', user.id).select().single();\n      if (error) {\n        console.error('Error updating routine:', error);\n        throw error;\n      }\n      return data;\n    } else {\n      // Create new routine\n      const {\n        data,\n        error\n      } = await supabase.from('workout_routines').insert([{\n        selected_workout_ids: routine.selectedWorkoutIds,\n        ordered_routine_items: routine.orderedRoutineItems,\n        rotation_cycles: routine.rotationCycles,\n        user_id: user.id\n      }]).select().single();\n      if (error) {\n        console.error('Error creating routine:', error);\n        throw error;\n      }\n      return data;\n    }\n  }\n};","map":{"version":3,"names":["supabase","workoutService","getWorkouts","data","error","from","select","order","ascending","console","createWorkout","workout","user","auth","getUser","Error","insert","name","user_id","id","single","exercises","updateWorkout","workoutId","updates","update","eq","deleteWorkout","delete","getExercises","createExercise","exercise","updateExercise","exerciseId","deleteExercise","getRoutine","code","saveRoutine","routine","existingRoutine","selected_workout_ids","selectedWorkoutIds","ordered_routine_items","orderedRoutineItems","rotation_cycles","rotationCycles"],"sources":["/Users/ryanotero/Documents/The Pit/08.19.25 Cursor/src/services/workoutService.js"],"sourcesContent":["import { supabase } from '../supabase'\n\n// Workout CRUD operations\nexport const workoutService = {\n  // Get all workouts for the current user\n  async getWorkouts() {\n    const { data, error } = await supabase\n      .from('workouts')\n      .select(`\n        *,\n        exercises (*)\n      `)\n      .order('created_at', { ascending: false })\n    \n    if (error) {\n      console.error('Error fetching workouts:', error)\n      throw error\n    }\n    \n    return data || []\n  },\n\n  // Create a new workout\n  async createWorkout(workout) {\n    const { data: { user } } = await supabase.auth.getUser()\n    \n    if (!user) {\n      throw new Error('User not authenticated')\n    }\n\n    const { data, error } = await supabase\n      .from('workouts')\n      .insert([\n        {\n          name: workout.name,\n          user_id: user.id\n        }\n      ])\n      .select()\n      .single()\n    \n    if (error) {\n      console.error('Error creating workout:', error)\n      throw error\n    }\n    \n    return { ...data, exercises: [] }\n  },\n\n  // Update a workout\n  async updateWorkout(workoutId, updates) {\n    const { data, error } = await supabase\n      .from('workouts')\n      .update(updates)\n      .eq('id', workoutId)\n      .select()\n      .single()\n    \n    if (error) {\n      console.error('Error updating workout:', error)\n      throw error\n    }\n    \n    return data\n  },\n\n  // Delete a workout\n  async deleteWorkout(workoutId) {\n    const { error } = await supabase\n      .from('workouts')\n      .delete()\n      .eq('id', workoutId)\n    \n    if (error) {\n      console.error('Error deleting workout:', error)\n      throw error\n    }\n  },\n\n  // Exercise operations\n  async getExercises(workoutId) {\n    const { data, error } = await supabase\n      .from('exercises')\n      .select('*')\n      .eq('workout_id', workoutId)\n      .order('order_index')\n    \n    if (error) {\n      console.error('Error fetching exercises:', error)\n      throw error\n    }\n    \n    return data || []\n  },\n\n  async createExercise(exercise) {\n    const { data, error } = await supabase\n      .from('exercises')\n      .insert([exercise])\n      .select()\n      .single()\n    \n    if (error) {\n      console.error('Error creating exercise:', error)\n      throw error\n    }\n    \n    return data\n  },\n\n  async updateExercise(exerciseId, updates) {\n    const { data, error } = await supabase\n      .from('exercises')\n      .update(updates)\n      .eq('id', exerciseId)\n      .select()\n      .single()\n    \n    if (error) {\n      console.error('Error updating exercise:', error)\n      throw error\n    }\n    \n    return data\n  },\n\n  async deleteExercise(exerciseId) {\n    const { error } = await supabase\n      .from('exercises')\n      .delete()\n      .eq('id', exerciseId)\n    \n    if (error) {\n      console.error('Error deleting exercise:', error)\n      throw error\n    }\n  },\n\n  // Routine operations\n  async getRoutine() {\n    const { data: { user } } = await supabase.auth.getUser()\n    \n    if (!user) {\n      throw new Error('User not authenticated')\n    }\n\n    const { data, error } = await supabase\n      .from('workout_routines')\n      .select('*')\n      .eq('user_id', user.id)\n      .single()\n    \n    if (error && error.code !== 'PGRST116') { // PGRST116 is \"not found\" error\n      console.error('Error fetching routine:', error)\n      throw error\n    }\n    \n    return data\n  },\n\n  async saveRoutine(routine) {\n    const { data: { user } } = await supabase.auth.getUser()\n    \n    if (!user) {\n      throw new Error('User not authenticated')\n    }\n\n    // Try to update existing routine first\n    const existingRoutine = await this.getRoutine()\n    \n    if (existingRoutine) {\n      const { data, error } = await supabase\n        .from('workout_routines')\n        .update({\n          selected_workout_ids: routine.selectedWorkoutIds,\n          ordered_routine_items: routine.orderedRoutineItems,\n          rotation_cycles: routine.rotationCycles\n        })\n        .eq('user_id', user.id)\n        .select()\n        .single()\n      \n      if (error) {\n        console.error('Error updating routine:', error)\n        throw error\n      }\n      \n      return data\n    } else {\n      // Create new routine\n      const { data, error } = await supabase\n        .from('workout_routines')\n        .insert([\n          {\n            selected_workout_ids: routine.selectedWorkoutIds,\n            ordered_routine_items: routine.orderedRoutineItems,\n            rotation_cycles: routine.rotationCycles,\n            user_id: user.id\n          }\n        ])\n        .select()\n        .single()\n      \n      if (error) {\n        console.error('Error creating routine:', error)\n        throw error\n      }\n      \n      return data\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}